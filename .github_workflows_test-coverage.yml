name: Test Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests with coverage
      run: |
        go test ./... -coverprofile=coverage.out -covermode=atomic

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Check critical function coverage
      run: |
        # Extract coverage for clients.GetBucketConfig
        COVERAGE=$(go tool cover -func=coverage.out | grep "GetBucketConfig" | awk '{print $3}' | sed 's/%//')

        if [ -z "$COVERAGE" ]; then
          echo "ERROR: GetBucketConfig has no test coverage!"
          exit 1
        fi

        # Require at least 80% coverage for critical authentication functions
        if [ "${COVERAGE%.*}" -lt 80 ]; then
          echo "ERROR: GetBucketConfig coverage is only ${COVERAGE}%, minimum required is 80%"
          exit 1
        fi

        echo "âœ… GetBucketConfig coverage: ${COVERAGE}%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html