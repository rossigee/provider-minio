name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - master
      - release-*
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  actions: read
  pull-requests: read

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_VERSION: 'latest'
  GOLANGCILINT_VERSION: '2.3.1'
  DOCKER_BUILDX_VERSION: 'v0.11.2'
  # Registry configuration
  PRIMARY_REGISTRY: ghcr.io/rossigee
  ENABLE_HARBOR_PUBLISH: false
  ENABLE_UPBOUND_PUBLISH: false

jobs:
  detect-noop:
    runs-on: ubuntu-24.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  # PR-specific: Check labels
  check-labels:
    if: github.event_name == 'pull_request' && github.event.pull_request.number != 0
    runs-on: ubuntu-24.04
    steps:
      - name: Check required labels
        uses: docker://agilepathway/pull-request-label-checker:v1.6.51
        with:
          one_of: major,minor,patch,documentation,dependency
          repo_token: ${{ secrets.GITHUB_TOKEN }}

  # Main CI pipeline
  ci-pipeline:
    runs-on: ubuntu-24.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Cache disabled due to corruption issues
      # - name: Cache Go modules
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-v2-

      - name: Vendor Dependencies
        run: go mod vendor

      - name: Install Crossplane CLI
        run: |
          CLI_PATH=".cache/tools/linux_x86_64/crossplane-cli-v1.20.0"
          mkdir -p "$(dirname "$CLI_PATH")"
          curl -fsSL "https://releases.crossplane.io/stable/v1.20.0/bin/linux_amd64/crank" -o "$CLI_PATH"
          chmod +x "$CLI_PATH"

      # Lint
      - name: Lint
        run: make lint

      # Code generation check
      - name: Check Diff
        run: |
          make reviewable
          git diff --exit-code

      # Unit Tests
      - name: Run Unit Tests
        run: make test

      # Security Scan
      - name: Run Go Vulnerability Check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
        continue-on-error: true

      - name: Fix Gosec SARIF format
        if: always() && hashFiles('gosec-results.sarif') != ''
        run: |
          if [ -f gosec-results.sarif ]; then
            jq '.runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if . == null or . == "" then "." else . end' gosec-results.sarif > gosec-results-fixed.sarif
            mv gosec-results-fixed.sarif gosec-results.sarif
          fi

      - name: Upload Gosec Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          verbose: true

  # Branch builds for PRs
  build-branch:
    runs-on: ubuntu-24.04
    needs: [ci-pipeline]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed 's/\//_/g' )" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push branch package
        run: make package-push-branchtag -e IMG_TAG="${{ steps.extract_branch.outputs.branch }}"

  # Production publishing (only on push to master)
  publish-artifacts:
    runs-on: ubuntu-24.04
    needs: [ci-pipeline]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: go mod vendor

      - name: Install Crossplane CLI
        run: |
          CLI_PATH=".cache/tools/linux_x86_64/crossplane-cli-v1.20.0"
          mkdir -p "$(dirname "$CLI_PATH")"
          curl -fsSL "https://releases.crossplane.io/stable/v1.20.0/bin/linux_amd64/crank" -o "$CLI_PATH"
          chmod +x "$CLI_PATH"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Login to Harbor Registry (Optional)
        if: env.ENABLE_HARBOR_PUBLISH == 'true'
        uses: docker/login-action@v3
        with:
          registry: harbor.golder.lan
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and Push to Primary Registry
        run: |
          # Build and push to GitHub Container Registry (primary)
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          make publish REGISTRY_ORGS="ghcr.io/${{ github.repository_owner }}" XPKG_REG_ORGS="ghcr.io/${{ github.repository_owner }}"

      - name: Build and Push to Harbor (Optional)
        if: env.ENABLE_HARBOR_PUBLISH == 'true'
        run: |
          # Push to Harbor Registry
          make publish REGISTRY_ORGS="harbor.golder.lan/library"

      - name: Build and Push to Upbound Registry (Optional)
        if: env.ENABLE_UPBOUND_PUBLISH == 'true'
        run: |
          # Push to Upbound Registry (only if token is available)
          if [ -n "$UPBOUND_TOKEN" ]; then
            make publish REGISTRY_ORGS="xpkg.upbound.io/crossplane-contrib"
          else
            echo "UPBOUND_TOKEN not available, skipping Upbound registry push"
          fi
        env:
          UPBOUND_TOKEN: ${{ secrets.UPBOUND_TOKEN }}
